function [LBR,Y,LBRpial] = laminar_bold_model(P,cbf,cmro2)
 
% This function represents a model of laminar BOLD response (LBR) as defined
% in Havlicek, M. & Uludag, K. (submitted) 

% FUNCTION INPUTS:
%       P - structure of parameters (generated by...)
%
%       cbf - matrix defining laminar cerebral blood flow (CBF) response, (time,depth). (Required);
%
%       cmro2 - matrix defining laminar changes in oxygen metabolism (CMRO2), (time,depth). 
% FUNCTION OUTPUTS:
  
% Hemodynamic model parameters:
%--------------------------------------------------------------------------
K         = P.K;      % Number of depths (Reference: Superfical depth close to CSF is k = 1;)

%% BASELINE PARAMETERS:

V0t       = P.V0t;    % Total amount of CBV0 within GM tisse (in mL)
V0t_p     = P.V0t_p;  % Total amount of CBV0 in pial vein (in mL)

w_v       = P.w_v;      % Fraction of CBV0 in venules with respect to the total, 
w_d       = 1-w_v;    % Fraction of CBV0 in ascending vein with respect to the total, 

s_v       = P.s_v;    % Slope of CBV0 increase towards the surface in venules 
s_d       = P.s_d;    % Slope of CBV0 increase towards the surface in ascending vein 

% Depth-specific CBV0:
if length(P.x_v) == K,
    x_v  = P.x_v;
else
    x_v  = 10+s_v*flipud(P.l(:));  % Possibility to define linear increase (default s_v = 0)
end
x_v      = x_v./sum(x_v);      % Fraction of CBV0 across depths in venules 

if length(P.x_v) == K,
    x_d  = P.x_d;
else
    x_d  = 10+s_d*flipud(P.l(:));  % Possibility to define linear increase 
end
x_d      = x_d./sum(x_d);      % Fraction of CBV0 across depths in venules 

V0v      = V0t*w_v*x_v;        % CBV0 in venules
V0d      = V0t*w_d*x_d;        % CBV0 in ascending vein
V0p      = V0t_p;              % CBV0 in pial vein

% Transit time through venules (or microvasculature in general)
if length(P.t0v) == K,
    t0v    = P.t0v;              % depth-specific
else
    t0v    = ones(K,1).*P.t0v;    % default
end;

% Depth-specific baseline CBF:  
F0v     = V0v./t0v;          % Note: can be also defined directly and t0v calculated from V0v and F0v
F0d     = flipud(cumsum(flipud(F0v)));
F0p     = F0d(1);

% Depth-specific transit time:  
t0v     = V0v./F0v;   
t0d     = V0d./F0d;
t0p     = V0p./F0p;

% Total mean transit time:
tt0v    = mean(t0v);   
tt0d    = mean(cumsum(t0d));
tt0     = tt0v + tt0d; % It must equal V0t./sum(F0v)

% Baseline oxygen extraction fraction (assumed constant in venous vessels) 
E0v        = ones(K,1).*P.E0v; 
E0d        = E0v;
E0p        = E0v;

%% PARAMETERS DESCRIBING RELATIVE RELATIONSHIPS BETWEEN PHYSIOLOGICAL VARIABLES:
% n-ratio (= (cbf-1)./(cmro2-1)). Not used if cmro2 response is specified as input
if length(P.n) == K,
    n      = P.n;                % depth-specific
else
    n      = ones(K,1)*P.n;      % default
end;

% Grubb's exponent alpha (i.e CBF-CBV steady-state relationship)
if length(P.alpha_v) == K,     % venules
    alpha_v    = P.alpha_v;
else
    alpha_v    = ones(K,1).*P.alpha_v;
end;
if length(P.alpha_v) == K,
    alpha_d    = P.alpha_d;      % ascending vein
else
    alpha_d    = ones(K,1).*P.alpha_d; 
end
alpha_p    = P.alpha_p;          % pial vein 

% CBF-CBV uncoupling (tau) during inflation and deflation:
if length(P.tau_v_in) == K,     
    tau_v_in  = P.tau_v_in;  % venules
else
    tau_v_in  = ones(K,1).*P.tau_v_in;  % venules
end
if length(P.tau_v_in) == K, 
    tau_v_de  = P.tau_v_de; 
else
    tau_v_de  = ones(K,1).*P.tau_v_de; 
end
if length(P.tau_v_in) == K, 
    tau_d_in  = P.tau_d_in;     % draining vein
else
    tau_d_in  = ones(K,1)*P.tau_d_in;  
end;
if length(P.tau_v_in) == K, 
    tau_d_de  = P.tau_d_de;
else
    tau_d_de  = ones(K,1).*P.tau_d_de;
end
tau_p_in  = P.tau_p_in;  % pial vein
tau_p_de  = P.tau_p_de;


%% Parameters for laminar BOLD signal equation (for 7 T field strenght):
%--------------------------------------------------------------------------
V0vq = V0v./100*K;
V0dq = V0d./100*K;
V0pq = V0p./100;

TE     = P.TE;     % echo-time (sec)

Hct_v  = P.Hct_v;      % Hematocrit fraction
Hct_d  = P.Hct_d;
Hct_p  = P.Hct_p;
B0     = P.B0;         % Field strenght        
gyro   = P.gyro;
suscep = P.suscep;

nu0v   = suscep*gyro*Hct_v*B0;
nu0d   = suscep*gyro*Hct_d*B0;
nu0p   = suscep*gyro*Hct_p*B0; 

rho_t  = P.rho_t;
rho_v  = P.rho_v; % Ref. Lu et al. (2002) NeuroImage
rho_d  = P.rho_d;
rho_p  = P.rho_p;
rho_tp = P.rho_tp;

if length(P.R2s_t) == K,
    R2s_t  = P.R2s_t; % (sec-1)
else
    R2s_t  = ones(K,1).*P.R2s_t;   % (sec-1)
end
if length(P.R2s_v) == K,
    R2s_v  = P.R2s_v; % (sec-1)
else
    R2s_v  = ones(K,1)*P.R2s_v; % (sec-1) 
end
if length(P.R2s_d) == K,
    R2s_d  = P.R2s_d; % (sec-1)
else
    R2s_d  = ones(K,1)*P.R2s_d; % (sec-1)  
end
R2s_p  = P.R2s_p; % (sec-1)


ep_v   = rho_v./rho_t.*exp(-TE*R2s_v)./exp(-TE*R2s_t); %0.27;       % intra-to-extravascular baseline signal ratio for venules
ep_d   = rho_d./rho_t.*exp(-TE*R2s_d)./exp(-TE*R2s_t); %0.23;       % ... for ascending vein
ep_p   = rho_p./rho_tp.*exp(-TE*R2s_p)./exp(-TE*R2s_t); %0.19;       % ... for pial vein 

r0v    = 228;       % Slope of change in R2* of blood with change in extraction fration during activation 
r0d    = 232;  
r0p    = 236;  

H0     = 1./(1 - V0vq - V0dq + ep_v.*V0vq + ep_d.*V0dq);  % constant in front
H0p    = 1./(1 - V0pq + ep_p.*V0pq);

k1v     = 4.3.*nu0v.*E0v.*TE;
k2v     = ep_v.*r0v.*E0v.*TE;
k3v     = 1 - ep_v;

k1d     = 4.3.*nu0d.*E0d.*TE;
k2d     = ep_v.*r0d.*E0d.*TE;
k3d     = 1 - ep_d;

k1p     = 4.3.*nu0p.*E0p.*TE;
k2p     = ep_p.*r0p.*E0p.*TE;
k3p     = 1 - ep_p;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Neuronal model parameters
%--------------------------------------------------------------------------

% T        = 65/dt; %M.T;% time course lenght (sec/dt)
% st_duration = 20;  % sec

% A   = -eye(N)*exp(P.a);
% mu  = P.mu;
% lam = 0.1*exp(P.lambda);
% Bee = P.Bee;
% %Bei = P.Bei;
% Bie = P.Bie;
% %Bii = P.Bii;
% %Bin = Bin;

% NVC parameters:
%--------------------------------------------------------------------------
% c1       = 0.6;
% c2       = 1.5;
% c3       = 2;
%{diag(sum(M.profile,2))}; %



% Initial condition:

Xk       = zeros(K,4);
Xp       = zeros(1,2);

yk       = Xk;
yp       = Xp;

f_d      = ones(K,1);
dv_d     = ones(K,1);
dHb_d    = ones(K,1);

tau_v    = tau_v_in;
tau_d    = tau_d_in;
tau_p    = tau_p_in;
LBR      = [];
LBRpial  = [];
% integration step

dt = P.dt;
for t = 1:P.T/dt

    Xk      = exp(Xk);    % log-normal transformation (Stephan et al.(2008), NeuroImage)
    Xp      = exp(Xp);
    
    % model input (laminar CBF response):
    f_a = cbf(t,:)';
    
    % VENULES COMPARTMENTS:
    %--------------------------------------------------------------------------
    % blood outflow from venules compartment
    if sum(alpha_v)>0
        f_v     = (V0v.*Xk(:,1).^(1./alpha_v) + F0v.*tau_v.*f_a)./(V0v+F0v.*tau_v);
    else
        f_v     = f_a;
    end
    % change in blood volume in venules:
    dv_v        = (f_a - f_v)./t0v;
    % change in oxygen matabolims (CMRO2)
    if isempty(cmro2)
        m        = (f_a + n-1)./n;  %(if not specified directly)
    else
        m        = cmro2(t,:)';
    end
    % change in deoxyhemoglobin content venules:
    dHb_v        = (m - f_v.*Xk(:,2)./Xk(:,1))./t0v;


    % ASCENDING VEIN COMPARTMENTS:
    %--------------------------------------------------------------------------    
    % blood outflow from Kth depth of ascending vein compartment (deepest depth):
    if alpha_d(end)>0
        f_d(end)  = (V0d(end).*Xk(end,3).^(1./alpha_d(end)) + tau_d(end).*f_v(end).*F0v(end))./(V0d(end)+F0d(end).*tau_d(end));
    else
        f_d(end)  = f_v(end)*F0v(end)./F0d(end);
    end
    % changes in blood volume and deoxyhemoglobin in ascending vein (deepest depth):
    dv_d(end)     = (f_v(end) - f_d(end))./t0d(end);
    dHb_d(end)    = (f_v(end).*Xk(end,2)./Xk(end,1) - f_d(end).*Xk(end,4)./Xk(end,3))./t0d(end);
    
    % blood outflow from other comparments of ascending vein:
    for i = K-1:-1:1,
        if alpha_d(i)>0
            f_d(i)     = (V0d(i).*Xk(i,3).^(1./alpha_d(i)) + tau_d(i).*(f_v(i).*F0v(i)+f_d(i+1).*F0d(i+1)))./(V0d(i)+F0d(i).*tau_d(i));
        else
            f_d(i)     = f_v(i)*F0v(i)./F0d(i)+f_d(i+1)*F0d(i+1)./F0d(i);
        end
        % changes in blood volume and deoxyhemoglobin in ascending vein:
        dv_d(i)    = (f_v(i).*F0v(i)./F0d(i) + f_d(i+1).*F0d(i+1)./F0d(i) - f_d(i))./t0d(i);
        dHb_d(i)   = (f_v(i).*F0v(i)./F0d(i).*Xk(i,2)./Xk(i,1) + f_d(i+1).*F0d(i+1)./F0d(i).*Xk(i+1,4)./Xk(i+1,3) - f_d(i).*Xk(i,4)./Xk(i,3))./t0d(i);

    end;
    
    % PIAL VEIN COMPARTMENT:
    %--------------------------------------------------------------------------    

    % blood outflow from pial vein:
    if alpha_p>0
        f_p     = (V0p.*Xp(1).^(1./alpha_p) + F0p.*tau_p.*f_d(1))./(V0p+F0p.*tau_p);
    else
        f_p     = f_d(1);
    end;
    % changes in blood volume and deoxyhemoglobin in pial vein:
    dv_p  = (f_d(1) - f_p)./t0p;
    dHb_p = (f_d(1).*Xk(1,4)./Xk(1,3) - f_p.*Xp(2)./Xp(1))./t0p;
    
    
    % Intergrated changes to previous time point
    yk(:,1)  = yk(:,1) + dt*(dv_v./Xk(:,1));
    yk(:,2)  = yk(:,2) + dt*(dHb_v./Xk(:,2));
    yk(:,3)  = yk(:,3) + dt*(dv_d./Xk(:,3));
    yk(:,4)  = yk(:,4) + dt*(dHb_d./Xk(:,4));
    
    yp(:,1)  = yp(:,1) + dt*(dv_p./Xp(1));
    yp(:,2)  = yp(:,2) + dt*(dHb_p./Xp(2));
    


    Xk        = yk; 
    Xp        = yp;

    
    % venules:
    m_v  = m;
    v_v  = exp(yk(:,1)); % log-normal transformation
    q_v  = exp(yk(:,2));
    % draining vein:
    v_d  = exp(yk(:,3));
    q_d  = exp(yk(:,4));
    % pail vein:
    v_p  = exp(yp(:,1));
    q_p  = exp(yp(:,2));
    
    
    % save physiological variable:
    Y.qv(t,:) = q_v;
    Y.qd(t,:) = q_d;
    Y.qp(t,:) = q_p;

    Y.vv(t,:) = v_d;
    Y.vd(t,:) = v_v;
    Y.vp(t,:) = v_p;

    
    
    LBR(t,:) = H0.*((1-V0vq-V0dq).*(k1v.*V0vq.*(1-q_v)      +k1d.*V0dq.*(1-q_d))+...
                                    +k2v.*V0vq.*(1-q_v./v_v) +k2d.*V0dq.*(1-q_d./v_d)+...
                                    +k3v.*V0vq.*(1-v_v)      +k3d.*V0dq.*(1-v_d)).*100;
    
    
    LBRpial(t,:) = H0p.*((1-V0pq).*(k1p.*V0pq.*(1-q_p))+k2p.*V0pq.*(1-q_p./v_p)+k3p.*V0pq.*(1-v_p)).*100;
                         
end



